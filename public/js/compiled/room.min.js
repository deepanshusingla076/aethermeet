const urlParams = new URLSearchParams(window.location.search); const isDemoRoom = urlParams.get('demo') === 'true'; const token = localStorage.getItem('token'); const user = JSON.parse(localStorage.getItem('user') || '{}'); if (!isDemoRoom && !token) { window.location.href = '/'; } if (isDemoRoom) { const guestUser = { username: 'Guest' + Math.floor(Math.random() * 10000), id: 'demo-' + Date.now() }; localStorage.setItem('demoUser', JSON.stringify(guestUser)); } const socket = isDemoRoom ? io({ query: { demo: 'true' } }) : io({ auth: { token: token } }); const roomName = document.getElementById('roomName'); const roomDescription = document.getElementById('roomDescription'); const roomCodeDisplay = document.getElementById('roomCode'); const memberCount = document.getElementById('memberCount'); const ownerInfo = document.getElementById('ownerInfo'); const membersList = document.getElementById('membersList'); const pendingAdmissions = document.getElementById('pendingAdmissions'); const pendingList = document.getElementById('pendingList'); const chatMessages = document.getElementById('chatMessages'); const messageForm = document.getElementById('messageForm'); const messageInput = document.getElementById('messageInput'); const exportPdfBtn = document.getElementById('exportPdfBtn'); const leaveRoomBtn = document.getElementById('leaveRoomBtn'); const shareLinkBtn = document.getElementById('shareLinkBtn'); const connectionStatus = document.getElementById('connectionStatus'); const statusText = document.getElementById('statusText'); const mediaUpload = document.getElementById('mediaUpload'); const audioRecordBtn = document.getElementById('audioRecordBtn'); const audioRecording = document.getElementById('audioRecording'); const stopRecording = document.getElementById('stopRecording'); const cancelRecording = document.getElementById('cancelRecording'); const recordingTime = document.getElementById('recordingTime'); const uploadProgress = document.getElementById('uploadProgress'); const uploadStatus = document.getElementById('uploadStatus'); const uploadBar = document.getElementById('uploadBar'); const leaveRoomModal = document.getElementById('leaveRoomModal'); const admissionModal = document.getElementById('admissionModal'); const shareLinkModal = document.getElementById('shareLinkModal'); let currentRoom = null; let isOwner = false; let mediaRecorder = null; let audioChunks = []; let recordingStartTime = null; let recordingInterval = null; document.addEventListener('DOMContentLoaded', () => { socket.emit('joinRoom', roomCode); }); socket.on('connect', () => { statusText.textContent = 'Connected'; connectionStatus.className = 'connection-status connected'; }); socket.on('disconnect', () => { statusText.textContent = 'Disconnected'; connectionStatus.className = 'connection-status disconnected'; }); socket.on('roomJoined', (roomInfo) => { currentRoom = roomInfo; const currentUser = isDemoRoom ? JSON.parse(localStorage.getItem('demoUser') || '{}') : user; isOwner = roomInfo.owner === currentUser.username; roomName.textContent = roomInfo.name; roomDescription.textContent = roomInfo.description || ''; roomCodeDisplay.textContent = `Code: ${roomInfo.roomCode}`; memberCount.textContent = `Members: ${roomInfo.members.length}`; ownerInfo.textContent = `Owner: ${roomInfo.owner}`; updateMembersList(roomInfo.members); if (isDemoRoom) { leaveRoomBtn.textContent = 'Leave Demo Room'; } else if (isOwner) { leaveRoomBtn.textContent = 'Leave Room (Owner)'; } else { leaveRoomBtn.textContent = 'Leave Room'; } }); socket.on('messageHistory', (messages) => { chatMessages.innerHTML = ''; messages.forEach(message => { displayMessage(message); }); scrollToBottom(); }); socket.on('newMessage', (message) => { displayMessage(message); scrollToBottom(); }); socket.on('userJoined', (data) => { displaySystemMessage(`${data.username} joined the room`); memberCount.textContent = `Members: ${data.memberCount}`; if (currentRoom) { currentRoom.members.push({ username: data.username, joinedAt: new Date() }); updateMembersList(currentRoom.members); } }); socket.on('userLeft', (data) => { displaySystemMessage(`${data.username} left the room`); memberCount.textContent = `Members: ${data.memberCount}`; if (currentRoom) { currentRoom.members = currentRoom.members.filter(member => member.username !== data.username); updateMembersList(currentRoom.members); } }); socket.on('userRemoved', (data) => { displaySystemMessage(`${data.username} was removed from the room by ${data.removedBy}`); memberCount.textContent = `Members: ${data.memberCount}`; if (currentRoom) { currentRoom.members = currentRoom.members.filter(member => member.username !== data.username); updateMembersList(currentRoom.members); } }); socket.on('removedFromRoom', (data) => { const currentUser = isDemoRoom ? JSON.parse(localStorage.getItem('demoUser') || '{}') : user; if (data.username === currentUser.username) { alert(`You have been removed from the room by ${data.removedBy}`); if (isDemoRoom) { window.location.href = '/'; } else { window.location.href = '/dashboard'; } } }); socket.on('userAdmitted', (data) => { displaySystemMessage(`${data.username} was admitted to the room`); memberCount.textContent = `Members: ${data.memberCount}`; if (currentRoom) { currentRoom.members.push({ username: data.username, joinedAt: new Date() }); updateMembersList(currentRoom.members); } }); socket.on('admissionRequired', (data) => { if (isOwner || currentRoom.admissionType === 'democratic_voting') { showAdmissionRequest(data); } }); socket.on('pendingAdmissions', (pending) => { updatePendingAdmissions(pending); }); socket.on('voteUpdate', (data) => { displaySystemMessage(`Vote update for ${data.username}: ${data.voteResult.admit} admit, ${data.voteResult.deny} deny (${data.requiredVotes} required)`); }); socket.on('ownerTransfer', (data) => { displaySystemMessage(`Room ownership transferred from ${data.oldOwner} to ${data.newOwner}`); if (currentRoom) { currentRoom.owner = data.newOwner; ownerInfo.textContent = `Owner: ${data.newOwner}`; isOwner = data.newOwner === user.username; if (isOwner) { leaveRoomBtn.textContent = 'Leave Room (Owner)'; } } }); socket.on('roomDestroyed', (data) => { displaySystemMessage(`Room destroyed: ${data.reason}`); setTimeout(() => { alert(`Room has been destroyed: ${data.reason}`); window.location.href = isDemoRoom ? '/' : '/dashboard'; }, 2000); }); socket.on('roomEmpty', (data) => { displaySystemMessage(`Room is now empty but remains active. You can invite others to rejoin.`); }); socket.on('admissionResult', (data) => { if (data.username === user.username) { if (data.result === 'admitted') { alert('You have been admitted to the room!'); if (window.location.pathname.includes('/room/')) { window.location.reload(); } else { window.location.href = `/room/${data.roomCode}`; } } else { alert('Your admission request was denied.'); window.location.href = '/dashboard'; } } }); socket.on('error', (data) => { alert(`Error: ${data.message}`); if (data.message.includes('Cannot join room')) { window.location.href = '/dashboard'; } }); messageForm.addEventListener('submit', (e) => { e.preventDefault(); const content = messageInput.value.trim(); if (content) { sendMessage(content); messageInput.value = ''; } }); mediaUpload.addEventListener('change', handleMediaUpload); audioRecordBtn.addEventListener('click', startAudioRecording); stopRecording.addEventListener('click', stopAudioRecording); cancelRecording.addEventListener('click', cancelAudioRecording); shareLinkBtn.addEventListener('click', showShareLink); document.addEventListener('click', (e) => { if (e.target.id === 'copyLinkBtn' && e.target.closest('#shareLinkModal')) { copyShareLink(); } if (e.target.id === 'copyCodeBtn' && e.target.closest('#shareLinkModal')) { copyRoomCode(); } if (e.target.classList.contains('admission-btn')) { e.preventDefault(); const username = e.target.dataset.username; const decision = e.target.dataset.decision; if (username && decision) { approveAdmission(username, decision); } } if (e.target.classList.contains('vote-btn')) { e.preventDefault(); const username = e.target.dataset.username; const decision = e.target.dataset.decision; if (username && decision) { castVote(username, decision); } } }); function showModal(modal) { if (modal) { modal.classList.remove('hidden'); } } function closeModal(modal) { if (modal) { modal.classList.add('hidden'); } } function showShareLink() { const currentUrl = window.location.origin; const shareUrl = `${currentUrl}/join/${roomCode}`; document.getElementById('shareLink').textContent = shareUrl; showModal(shareLinkModal); } function copyShareLink() { const shareLink = document.getElementById('shareLink').textContent; if (navigator.clipboard && window.isSecureContext) { navigator.clipboard.writeText(shareLink).then(() => { showNotification('✅ Share link copied to clipboard!'); }).catch(() => { fallbackCopyTextToClipboard(shareLink, 'share link'); }); } else { fallbackCopyTextToClipboard(shareLink, 'share link'); } } function copyRoomCode() { if (navigator.clipboard && window.isSecureContext) { navigator.clipboard.writeText(roomCode).then(() => { showNotification('✅ Room code copied to clipboard!'); }).catch(() => { fallbackCopyTextToClipboard(roomCode, 'room code'); }); } else { fallbackCopyTextToClipboard(roomCode, 'room code'); } } function fallbackCopyTextToClipboard(text, itemName) { const textArea = document.createElement('textarea'); textArea.value = text; textArea.style.position = 'fixed'; textArea.style.left = '-999999px'; textArea.style.top = '-999999px'; document.body.appendChild(textArea); textArea.focus(); textArea.select(); try { const successful = document.execCommand('copy'); if (successful) { showNotification(`✅ ${itemName.charAt(0).toUpperCase() + itemName.slice(1)} copied to clipboard!`); } else { showError(`Failed to copy ${itemName}`); } } catch (err) { showError(`Failed to copy ${itemName}`); } document.body.removeChild(textArea); } function showNotification(message) { const notificationDiv = document.createElement('div'); notificationDiv.className = 'fixed top-4 right-4 bg-green-500 text-white p-3 border-2 border-black font-mono text-sm z-50'; notificationDiv.style.boxShadow = '3px 3px 0px 0px #000000'; notificationDiv.textContent = message; document.body.appendChild(notificationDiv); setTimeout(() => { if (notificationDiv.parentNode) { notificationDiv.parentNode.removeChild(notificationDiv); } }, 3000); } function sendMessage(content, type = 'text', mediaData = null) { const messageData = { content: content.trim(), messageType: type, timestamp: new Date() }; if (mediaData) { messageData.mediaUrl = mediaData.url; messageData.mediaName = mediaData.name; messageData.mediaSize = mediaData.size; if (type === 'audio') { messageData.audioDuration = mediaData.duration; } } socket.emit('sendMessage', messageData); } function handleMediaUpload() { const file = mediaUpload.files[0]; if (!file) return; if (file.size > 10 * 1024 * 1024) { showError('File size must be less than 10MB'); mediaUpload.value = ''; return; } let messageType = 'file'; if (file.type.startsWith('image/')) { messageType = 'image'; } else if (file.type.startsWith('video/')) { messageType = 'video'; } else if (file.type.startsWith('audio/')) { messageType = 'audio'; } uploadFile(file, messageType); } function uploadFile(file, messageType) { const formData = new FormData(); formData.append('media', file); uploadProgress.style.display = 'block'; uploadStatus.textContent = 'Uploading...'; uploadBar.style.width = '0%'; const headers = {}; if (!isDemoRoom) { const token = localStorage.getItem('token'); if (token) { headers['Authorization'] = `Bearer ${token}`; } } fetch('/api/media/upload', { method: 'POST', headers: headers, body: formData }) .then(response => response.json()) .then(data => { if (data.success) { const mediaData = { url: data.media.url, name: data.media.originalName, size: data.media.size }; const messageContent = file.name; sendMessage(messageContent, messageType, mediaData); uploadStatus.textContent = 'Upload complete!'; uploadBar.style.width = '100%'; setTimeout(() => { uploadProgress.style.display = 'none'; }, 2000); } else { throw new Error(data.message || 'Upload failed'); } }) .catch(error => { console.error('Upload error:', error); showError('Failed to upload file: ' + error.message); uploadStatus.textContent = 'Upload failed'; uploadBar.style.width = '0%'; setTimeout(() => { uploadProgress.style.display = 'none'; }, 3000); }) .finally(() => { mediaUpload.value = ''; }); } async function startAudioRecording() { try { console.log('🎤 Starting audio recording...'); const stream = await navigator.mediaDevices.getUserMedia({ audio: true }); console.log('✅ Microphone access granted'); mediaRecorder = new MediaRecorder(stream); audioChunks = []; recordingStartTime = Date.now(); mediaRecorder.ondataavailable = (event) => { audioChunks.push(event.data); console.log('📊 Audio data chunk received, size:', event.data.size); }; mediaRecorder.onstop = () => { console.log('⏹️ Recording stopped, processing audio...'); const audioBlob = new Blob(audioChunks, { type: 'audio/webm' }); const duration = Math.floor((Date.now() - recordingStartTime) / 1000); console.log('🎵 Audio blob created, size:', audioBlob.size, 'duration:', duration + 's'); const audioFile = new File([audioBlob], `audio-${Date.now()}.webm`, { type: 'audio/webm' }); uploadAudioFile(audioFile, duration); stream.getTracks().forEach(track => track.stop()); }; mediaRecorder.start(); console.log('🔴 Recording started'); audioRecordBtn.style.display = 'none'; audioRecording.style.display = 'flex'; updateRecordingTime(); recordingInterval = setInterval(updateRecordingTime, 1000); } catch (error) { console.error('❌ Error starting recording:', error); showError('Failed to start recording. Please check microphone permissions.'); } } function stopAudioRecording() { if (mediaRecorder && mediaRecorder.state === 'recording') { mediaRecorder.stop(); clearInterval(recordingInterval); resetRecordingUI(); } } function cancelAudioRecording() { if (mediaRecorder && mediaRecorder.state === 'recording') { mediaRecorder.stop(); audioChunks = []; clearInterval(recordingInterval); resetRecordingUI(); } } function resetRecordingUI() { audioRecordBtn.style.display = 'block'; audioRecording.style.display = 'none'; recordingTime.textContent = '0:00'; } function updateRecordingTime() { if (recordingStartTime) { const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000); const minutes = Math.floor(elapsed / 60); const seconds = elapsed % 60; recordingTime.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`; } } function uploadAudioFile(audioFile, duration) { console.log('📤 Uploading audio file:', audioFile.name, 'size:', audioFile.size, 'duration:', duration + 's'); const formData = new FormData(); formData.append('media', audioFile); uploadProgress.style.display = 'block'; uploadStatus.textContent = 'Uploading audio...'; uploadBar.style.width = '0%'; fetch('/api/media/upload', { method: 'POST', headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }, body: formData }) .then(response => { console.log('📡 Upload response status:', response.status); return response.json(); }) .then(data => { console.log('📥 Upload response data:', data); if (data.success) { const mediaData = { url: data.media.url, name: data.media.originalName, size: data.media.size, duration: duration }; console.log('✅ Sending audio message with data:', mediaData); sendMessage('🎙️ Audio message', 'audio', mediaData); uploadStatus.textContent = 'Audio uploaded!'; uploadBar.style.width = '100%'; setTimeout(() => { uploadProgress.style.display = 'none'; }, 2000); } else { throw new Error(data.message || 'Upload failed'); } }) .catch(error => { console.error('❌ Audio upload error:', error); showError('Failed to upload audio: ' + error.message); uploadStatus.textContent = 'Upload failed'; uploadBar.style.width = '0%'; setTimeout(() => { uploadProgress.style.display = 'none'; }, 3000); }); } function formatFileSize(bytes) { if (bytes === 0) return '0 Bytes'; const k = 1024; const sizes = ['Bytes', 'KB', 'MB', 'GB']; const i = Math.floor(Math.log(bytes) / Math.log(k)); return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]; } function formatDuration(seconds) { const mins = Math.floor(seconds / 60); const secs = seconds % 60; return `${mins}:${secs.toString().padStart(2, '0')}`; } exportPdfBtn.addEventListener('click', async () => { const choice = confirm('Choose export option:\nOK = Download PDF immediately\nCancel = Save to Personal Notes'); if (choice) { await downloadPdf(); } else { await savePdfToNotes(); } }); async function downloadPdf() { try { const headers = { 'Content-Type': 'application/json' }; if (!isDemoRoom && token) { headers['Authorization'] = `Bearer ${token}`; } const response = await fetch(`/api/rooms/${roomCode}/export`, { method: 'GET', headers: headers }); if (response.ok) { const blob = await response.blob(); const url = window.URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `${roomCode}_chat_export.pdf`; document.body.appendChild(a); a.click(); window.URL.revokeObjectURL(url); document.body.removeChild(a); showNotification('✅ PDF exported successfully!'); } else { const data = await response.json(); showError(`Failed to export PDF: ${data.message}`); } } catch (error) { console.error('PDF export error:', error); showError('Failed to export PDF. Please try again.'); } } async function savePdfToNotes() { try { const headers = { 'Content-Type': 'application/json' }; if (!isDemoRoom && token) { headers['Authorization'] = `Bearer ${token}`; } const response = await fetch(`/api/rooms/${roomCode}/export?format=base64`, { method: 'GET', headers: headers }); if (response.ok) { const data = await response.json(); if (data.success) { sessionStorage.setItem('pendingPdfData', data.pdfData); sessionStorage.setItem('pendingRoomCode', data.roomCode); const notesUrl = '/notes?action=save-pdf'; if (confirm('PDF ready to save to notes. Open notes page?\nOK = Open in new tab\nCancel = Redirect current page')) { window.open(notesUrl, '_blank'); } else { window.location.href = notesUrl; } } else { showError(`Failed to prepare PDF for notes: ${data.message}`); } } else { const data = await response.json(); showError(`Failed to export PDF: ${data.message}`); } } catch (error) { console.error('PDF save to notes error:', error); showError('Failed to prepare PDF for notes. Please try again.'); } } leaveRoomBtn.addEventListener('click', () => { if (isDemoRoom) { if (confirm('Are you sure you want to leave the demo room? Demo rooms are destroyed when the last member leaves.')) { socket.emit('leaveRoom', 'leave'); showNotification('Leaving demo room...'); setTimeout(() => { window.location.href = '/'; }, 1000); } } else if (isOwner) { showModal(leaveRoomModal); } else { if (confirm('Are you sure you want to leave the room?')) { socket.emit('leaveRoom', 'leave'); showNotification('Leaving room...'); setTimeout(() => { window.location.href = '/dashboard'; }, 1000); } } }); document.getElementById('destroyRoomBtn').addEventListener('click', () => { if (confirm('Are you sure you want to end the room for everyone? This cannot be undone.')) { socket.emit('leaveRoom', 'destroy'); closeModal(leaveRoomModal); } }); document.getElementById('transferOwnershipBtn').addEventListener('click', () => { if (confirm('Are you sure you want to transfer ownership and leave the room?')) { socket.emit('leaveRoom', 'transfer'); closeModal(leaveRoomModal); } }); document.getElementById('cancelLeaveBtn').addEventListener('click', () => { closeModal(leaveRoomModal); }); document.addEventListener('click', (e) => { if (e.target.classList.contains('close')) { closeModal(e.target.closest('.fixed')); } if (e.target.classList.contains('fixed') && e.target.classList.contains('inset-0')) { closeModal(e.target); } }); function displayMessage(message) { const messageDiv = document.createElement('div'); messageDiv.className = `p-3 mb-2 border-2 border-black ${message.username === user.username ? 'bg-gray-200 ml-8' : 'bg-white mr-8'}`; messageDiv.style.boxShadow = '2px 2px 0px 0px #000000'; const timestamp = new Date(message.timestamp).toLocaleTimeString(); let messageContent = ''; const messageType = message.messageType || message.type || 'text'; if (messageType === 'text') { messageContent = ` <div class="flex justify-between items-center mb-1"> <span class="font-bold text-sm uppercase tracking-wide">${message.username}</span> <span class="text-xs font-mono text-gray-600">${timestamp}</span> </div> <div class="font-mono text-sm">${escapeHtml(message.content)}</div> `; } else if (messageType === 'image') { messageContent = ` <div class="flex justify-between items-center mb-1"> <span class="font-bold text-sm uppercase tracking-wide">${message.username}</span> <span class="text-xs font-mono text-gray-600">${timestamp}</span> </div> <div class="font-mono text-sm mb-2">${escapeHtml(message.content)}</div> <img src="${message.mediaUrl}" alt="${message.mediaName}" class="max-w-full h-auto border-2 border-black cursor-pointer hover:border-gray-600" onclick="window.open('${message.mediaUrl}', '_blank')" style="box-shadow: 2px 2px 0px 0px #000000;"> <div class="font-mono text-xs text-gray-500 mt-1">${message.mediaName} (${formatFileSize(message.mediaSize)})</div> `; } else if (messageType === 'audio') { messageContent = ` <div class="flex justify-between items-center mb-1"> <span class="font-bold text-sm uppercase tracking-wide">${message.username}</span> <span class="text-xs font-mono text-gray-600">${timestamp}</span> </div> <div class="font-mono text-sm mb-2">${escapeHtml(message.content)}</div> <div class="bg-gray-100 border-2 border-black p-2" style="box-shadow: 1px 1px 0px 0px #000000;"> <audio controls class="w-full"> <source src="${message.mediaUrl}" type="audio/webm"> <source src="${message.mediaUrl}" type="audio/mp4"> <source src="${message.mediaUrl}" type="audio/wav"> Your browser does not support audio playback. </audio> <div class="font-mono text-xs text-gray-500 mt-1"> ${message.mediaName} • Duration: ${formatDuration(message.audioDuration)} • ${formatFileSize(message.mediaSize)} </div> </div> `; } else if (messageType === 'video') { messageContent = ` <div class="flex justify-between items-center mb-1"> <span class="font-bold text-sm uppercase tracking-wide">${message.username}</span> <span class="text-xs font-mono text-gray-600">${timestamp}</span> </div> <div class="font-mono text-sm mb-2">${escapeHtml(message.content)}</div> <video controls class="max-w-full h-auto border-2 border-black" style="box-shadow: 2px 2px 0px 0px #000000;"> <source src="${message.mediaUrl}" type="video/mp4"> <source src="${message.mediaUrl}" type="video/webm"> Your browser does not support video playback. </video> <div class="font-mono text-xs text-gray-500 mt-1">${message.mediaName} (${formatFileSize(message.mediaSize)})</div> `; } else if (messageType === 'file') { messageContent = ` <div class="flex justify-between items-center mb-1"> <span class="font-bold text-sm uppercase tracking-wide">${message.username}</span> <span class="text-xs font-mono text-gray-600">${timestamp}</span> </div> <div class="font-mono text-sm mb-2">${escapeHtml(message.content)}</div> <div class="bg-gray-100 border-2 border-black p-2 hover:bg-gray-200 cursor-pointer" style="box-shadow: 1px 1px 0px 0px #000000;" onclick="window.open('${message.mediaUrl}', '_blank')"> <div class="font-bold">📎 ${message.mediaName}</div> <div class="font-mono text-xs text-gray-500">${formatFileSize(message.mediaSize)}</div> </div> `; } messageDiv.innerHTML = messageContent; chatMessages.appendChild(messageDiv); } function displaySystemMessage(content) { const messageDiv = document.createElement('div'); messageDiv.className = 'p-2 mb-2 bg-gray-100 border-2 border-gray-400 italic text-center text-sm font-mono text-gray-600'; messageDiv.style.boxShadow = '1px 1px 0px 0px #6b7280'; messageDiv.innerHTML = ` <div>${escapeHtml(content)}</div> `; chatMessages.appendChild(messageDiv); } function updateMembersList(members) { membersList.innerHTML = ''; members.forEach(member => { const memberDiv = document.createElement('div'); memberDiv.className = `p-2 mb-2 bg-white border-2 border-black ${member.username === currentRoom.owner ? 'bg-yellow-100' : ''}`; memberDiv.style.boxShadow = '1px 1px 0px 0px #000000'; const isOwner = member.username === currentRoom.owner; const canRemove = isOwner === false && user.username === currentRoom.owner; memberDiv.innerHTML = ` <div class="flex justify-between items-center"> <div> <span class="font-mono text-sm">${member.username}</span> ${isOwner ? '<span class="text-yellow-600 ml-2">👑</span>' : ''} </div> ${canRemove ? ` <button onclick="removeUser('${member.username}')" class="px-2 py-1 bg-red-500 text-white text-xs font-bold border border-black hover:bg-red-600" style="box-shadow: 1px 1px 0px 0px #000000;" title="Remove user from room"> ✕ </button> ` : ''} </div> `; membersList.appendChild(memberDiv); }); } function updatePendingAdmissions(pending) { if (pending.length === 0) { pendingAdmissions.classList.add('hidden'); return; } pendingAdmissions.classList.remove('hidden'); pendingList.innerHTML = ''; pending.forEach(member => { const pendingDiv = document.createElement('div'); pendingDiv.className = 'p-3 mb-2 bg-yellow-50 border-2 border-yellow-600'; pendingDiv.style.boxShadow = '2px 2px 0px 0px #d97706'; const voteInfo = currentRoom.admissionType === 'democratic_voting' ? `<div class="text-xs font-mono text-gray-600">Votes: ${member.votes ? member.votes.length : 0}</div>` : ''; pendingDiv.innerHTML = ` <div class="font-bold text-sm uppercase tracking-wide mb-1">${member.username}</div> ${voteInfo} <div class="mt-2"> ${getAdmissionActions(member)} </div> `; pendingList.appendChild(pendingDiv); }); } function getAdmissionActions(member) { const currentUser = isDemoRoom ? JSON.parse(localStorage.getItem('demoUser') || '{}') : user; if (currentRoom.admissionType === 'owner_approval' && isOwner) { return ` <button class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 border-2 border-black font-bold text-sm uppercase tracking-wide mr-2 admission-btn" style="box-shadow: 1px 1px 0px 0px #000000;" data-username="${member.username}" data-decision="admit">Admit</button> <button class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 border-2 border-black font-bold text-sm uppercase tracking-wide admission-btn" style="box-shadow: 1px 1px 0px 0px #000000;" data-username="${member.username}" data-decision="deny">Deny</button> `; } else if (currentRoom.admissionType === 'democratic_voting') { const hasVoted = member.votes && member.votes.some(vote => vote.voter === currentUser.username); if (hasVoted) { return '<div class="text-xs font-mono text-gray-600">You have voted</div>'; } return ` <button class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 border-2 border-black font-bold text-sm uppercase tracking-wide mr-2 vote-btn" style="box-shadow: 1px 1px 0px 0px #000000;" data-username="${member.username}" data-decision="admit">Vote Admit</button> <button class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 border-2 border-black font-bold text-sm uppercase tracking-wide vote-btn" style="box-shadow: 1px 1px 0px 0px #000000;" data-username="${member.username}" data-decision="deny">Vote Deny</button> `; } return ''; } function showAdmissionRequest(data) { const admissionDetails = document.getElementById('admissionDetails'); const admissionActions = document.getElementById('admissionActions'); admissionDetails.innerHTML = ` <p><strong>${data.username}</strong> wants to join the room.</p> <p>Requested at: ${new Date(data.requestedAt).toLocaleString()}</p> `; admissionActions.innerHTML = getAdmissionActions({ username: data.username, votes: [] }); openModal(admissionModal); } window.approveAdmission = async function(username, decision) { try { if (isDemoRoom) { displaySystemMessage('Admission control not available in demo rooms'); return; } const response = await fetch(`/api/rooms/${roomCode}/admission/${username}`, { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ decision }) }); const data = await response.json(); if (data.success) { displaySystemMessage(data.message); if (data.voteResult) { displaySystemMessage(`Vote count: ${data.voteResult.admit} admit, ${data.voteResult.deny} deny`); } } else { displaySystemMessage(`Error: ${data.message}`); } } catch (error) { console.error('Admission decision error:', error); displaySystemMessage('Failed to process admission decision'); } closeModal(admissionModal); }; window.castVote = async function(username, decision) { return window.approveAdmission(username, decision); }; window.removeUser = async function(username) { if (!confirm(`Are you sure you want to remove ${username} from the room?`)) { return; } try { const response = await fetch(`/api/rooms/${roomCode}/members/${username}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { displaySystemMessage(data.message); } else { displaySystemMessage(`Error: ${data.message}`); } } catch (error) { console.error('Remove user error:', error); displaySystemMessage('Failed to remove user from room'); } }; function scrollToBottom() { chatMessages.scrollTop = chatMessages.scrollHeight; } function escapeHtml(text) { const div = document.createElement('div'); div.textContent = text; return div.innerHTML; } function showError(message) { const errorDiv = document.createElement('div'); errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white p-3 border-2 border-black font-mono text-sm z-50'; errorDiv.style.boxShadow = '3px 3px 0px 0px #000000'; errorDiv.textContent = message; document.body.appendChild(errorDiv); setTimeout(() => { if (errorDiv.parentNode) { errorDiv.parentNode.removeChild(errorDiv); } }, 5000); } window.addEventListener('beforeunload', () => { socket.disconnect(); });